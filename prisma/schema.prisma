datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATIENT
  PHYSICIAN
  RADIOLOGIST
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
}

model User {
  id                   Int                 @unique @default(autoincrement())
  uid                  String              @unique @db.VarChar(29)
  email                String              @unique
  dob                  DateTime            @db.Date
  first_name           String
  last_name            String
  title                String?
  profile_image_url    String?
  role                 Role                @default(PATIENT)
  claimed_as_physician Boolean             @default(false)
  ImagesUploaded       Image[]             @relation("UploadedImages")
  Images               Image[]             @relation("Images")
  NotificationsFor     Notification[]      @relation("PatientNotification")
  NotificationsFrom    Notification[]      @relation("RadiologistNotification")
  PatientRelation      PatientRelation[]   @relation("PatientRelation")
  StaffRelation        PatientRelation[]   @relation("StaffRelation")
  StaffCredentials     StaffCredentials?
  PatientInvoice       Invoice[]           @relation("PatientInvoice")
  RadiologistInvoice   Invoice[]           @relation("RadiologistInvoice")
  Hospitals            HospitalPhysician[]

  @@index(uid)
}

model StripeUser {
  patient_uid String @unique @db.VarChar(29)
  stripe_id   String @unique
}

model Image {
  id                Int            @id @default(autoincrement())
  uid               String         @unique @db.VarChar(36)
  uploaded_by_user  User           @relation("UploadedImages", fields: [uploaded_by], references: [uid])
  uploaded_by       String         @db.VarChar(29)
  uploaded_for_user User           @relation("Images", fields: [uploaded_for], references: [uid])
  uploaded_for      String         @db.VarChar(29)
  url               String
  notes             ImageNote[]
  diagnoses         String?
  createdAt         DateTime       @default(now())
  Notification      Notification[] @relation("ImageNotification")

  @@index([uid])
  @@index([uploaded_by])
  @@index([uploaded_for])
}

model Hospital {
  id         Int                 @unique @default(autoincrement())
  uid        String              @unique @default(dbgenerated("(UUID())")) @db.VarChar(36)
  name       String              @db.VarChar(255)
  createdAt  DateTime            @default(now())
  Physicians HospitalPhysician[]
}

model HospitalPhysician {
  id            Int      @id @default(autoincrement())
  hospital      Hospital @relation(fields: [hospital_uid], references: [uid])
  hospital_uid  String   @db.VarChar(36)
  physician     User     @relation(fields: [physician_uid], references: [uid])
  physician_uid String   @db.VarChar(29)

  @@index([hospital_uid])
  @@index([physician_uid])
}

model ImageNote {
  uid        String   @unique @default(dbgenerated("(UUID())")) @db.VarChar(36)
  author_uid String   @db.VarChar(29)
  image_uid  String   @db.VarChar(36)
  note       String   @db.LongText
  createdAt  DateTime @default(now())
  Image      Image    @relation(fields: [image_uid], references: [uid])

  @@id([author_uid, image_uid])
  @@index([uid])
  @@index([author_uid])
  @@index([image_uid])
}

model Notification {
  id              Int     @id @default(autoincrement())
  uid             String  @unique @default(dbgenerated("(UUID())")) @db.VarChar(36)
  patient         User    @relation("PatientNotification", fields: [patient_uid], references: [uid])
  patient_uid     String  @db.VarChar(29)
  radiologist     User    @relation("RadiologistNotification", fields: [radiologist_uid], references: [uid])
  radiologist_uid String  @db.VarChar(29)
  image           Image   @relation("ImageNotification", fields: [image_uid], references: [uid])
  image_uid       String  @db.VarChar(36)
  read            Boolean @default(false)

  @@index([patient_uid])
  @@index([radiologist_uid])
  @@index([image_uid])
}

model PatientRelation {
  id          Int    @id @default(autoincrement())
  patient     User   @relation("PatientRelation", fields: [patient_uid], references: [uid])
  patient_uid String @db.VarChar(29)
  staff       User   @relation("StaffRelation", fields: [staff_uid], references: [uid])
  staff_uid   String @db.VarChar(29)

  @@unique([patient_uid, staff_uid])
  @@index([patient_uid])
  @@index([staff_uid])
}

model StaffCredentials {
  user         User    @relation(fields: [uid], references: [uid])
  uid          String  @unique @db.VarChar(29)
  bio          String? @db.LongText()
  expertise    String?
  years_of_exp Int?

  @@index([uid])
}

model Invoice {
  id              Int           @id @default(autoincrement())
  uid             String        @unique @db.VarChar(29)
  url             String        @db.LongText()
  patient         User          @relation("PatientInvoice", fields: [patient_uid], references: [uid])
  patient_uid     String        @db.VarChar(29)
  radiologist     User          @relation("RadiologistInvoice", fields: [radiologist_uid], references: [uid])
  radiologist_uid String        @db.VarChar(29)
  amount          Float
  paid            Boolean       @default(false)
  createdAt       DateTime      @default(now())

  @@index([patient_uid])
  @@index([radiologist_uid])
}
